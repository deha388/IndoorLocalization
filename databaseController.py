from turtle import pd
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

PavoDataset = pd.read_csv('dataset.csv')
print(PavoDataset.head(6))
print(PavoDataset.describe())
location=PavoDataset['location3'][:]
print(location.head(6))

X=PavoDataset.drop(['location3','location1','location2'],axis=1)


X_train, X_test, y_train, y_test = train_test_split(X, location, test_size = 0.10)

knn = KNeighborsClassifier(n_neighbors=3)

#Train the model using the training sets
knn.fit(X_train, y_train)

P=[[207.4,182.2,189.4,193.0,193.6]]

asa=knn.predict(P)
print ("2) Using K Neighbors Classifier Prediction is " + str(knn.predict(P)))



#some_dict={35: [177.2, 178.0, 183.6, 177.2, 182.6], 89: [188.8, 185.8, 181.0, 190.0, 193.0], 92: [196.0, 196.0, 190.6, 191.2, 194.8], 267: [184.0, 177.2, 173.5, 174.6, 182.2]}
some_dict={35: [177.8, 180.0, 182.2, 174.6, 182.8], 89: [188.8, 182.2, 180.4, 197.8, 192.4], 92: [196.0, 191.2, 185.8, 191.8, 198.4], 267: [173.2, 194.2, 184.8, 176.6, 180.0], 268: [192.4, 193.0, 190.0, 189.4, 198.4], 272: [182.2, 178.0, 181.0, 173.0, 183.4], 275: [185.0, 185.8, 187.4, 193.4, 192.6], 277: [180.0, 205.4, 188.4, 178.8, 185.8], 284: [180.0, 178.0, 169.0, 178.0, 182.8], 293: [189.4, 183.4, 180.4, 180.4, 192.4], 326: [185.2, 187.0, 187.0, 193.75, 194.8], 335: [179.8, 179.8, 181.6, 181.0, 189.4], 345: [173.75, 181.6, 183.6, 177.4, 177.2], 350: [175.0, 182.0, 179.8, 179.5, 181.0], 370: [171.2, 183.0, 189.4, 174.0, 179.4], 372: [183.4, 190.0, 187.0, 187.0, 193.6], 389: [183.4, 186.4, 181.0, 187.6, 190.0], 412: [179.8, 183.4, 181.6, 175.75, 187.0], 417: [185.5, 190.6, 184.0, 178.0, 184.6], 428: [186.4, 188.2, 196.0, 179.0, 181.0], 478: [178.4, 189.6, 186.8, 177.4, 183.6], 483: [179.8, 193.0, 190.6, 197.2, 190.0], 486: [178.6, 189.4, 186.4, 188.2, 194.8], 488: [186.4, 184.0, 184.0, 186.4, 201.4], 492: [192.6, 184.8, 186.8, 196.0, 193.8], 495: [181.8, 188.2, 190.6, 190.6, 186.4], 1009: [189.4, 178.2, 178.0, 178.2, 186.8], 1111: [179.6, 190.2, 187.6, 191.8, 192.4], 1683: [176.0, 179.2, 182.0, 175.2, 179.8], 1760: [183.4, 187.6, 181.0, 193.0, 191.8], 1772: [184.0, 187.0, 181.0, 185.0, 185.2], 1779: [190.6, 179.8, 178.6, 197.5, 189.4], 1898: [181.0, 178.0, 173.8, 175.6, 177.4], 1922: [187.0, 193.0, 197.2, 178.0, 197.2], 2254: [195.4, 190.0, 187.0, 188.2, 195.4], 2255: [190.0, 183.25, 182.2, 188.2, 195.4], 2261: [190.6, 191.2, 195.25, 192.4, 195.4], 2262: [195.4, 187.6, 184.0, 191.8, 193.6], 2265: [190.5, 188.2, 183.0, 185.8, 188.2], 2290: [208.0, 181.0, 182.5, 187.0, 196.0], 2323: [187.6, 185.8, 180.4, 184.0, 191.8], 2333: [179.8, 175.0, 175.0, 178.0, 182.5], 2335: [176.2, 187.75, 184.0, 179.0, 187.0], 2340: [184.0, 185.2, 184.6, 179.8, 183.4], 2352: [191.2, 185.8, 190.0, 186.4, 197.2], 2367: [175.6, 182.0, 184.0, 177.5, 180.0], 2372: [186.4, 184.0, 191.8, 177.0, 190.0], 2374: [186.4, 187.0, 184.0, 182.5, 190.6], 2530: [205.8, 183.4, 185.5, 186.4, 182.5], 2531: [192.4, 185.2, 182.2, 187.0, 204.4], 2549: [192.4, 189.4, 180.25, 185.8, 200.2], 2576: [193.0, 189.25, 183.4, 193.6, 200.2], 2578: [188.8, 179.5, 180.4, 183.4, 187.6], 2587: [187.0, 186.4, 182.2, 190.0, 189.4], 2674: [197.2, 186.4, 184.75, 190.0, 192.4], 2728: [202.0, 199.0, 183.4, 188.2, 198.4], 2857: [179.2, 185.8, 185.8, 176.5, 187.0], 2890: [185.2, 183.0, 184.0, 185.2, 188.2], 2891: [181.6, 180.4, 184.0, 190.0, 197.8], 2979: [185.8, 179.2, 186.4, 185.0, 192.4], 2987: [198.4, 186.4, 186.4, 185.8, 193.0], 3074: [176.0, 179.0, 180.6, 186.0, 182.33333333333334], 3075: [190.0, 190.0, 185.8, 189.4, 194.8], 3080: [179.8, 180.4, 183.4, 191.8, 199.0], 3092: [197.2, 183.4, 184.6, 190.0, 197.2], 3100: [196.0, 186.4, 178.6, 190.6, 191.2], 3130: [193.6, 182.2, 186.4, 195.4, 192.4], 3133: [187.8, 185.4, 183.4, 189.2, 186.0], 3147: [189.4, 199.0, 196.0, 193.6, 196.0], 3150: [180.0, 190.0, 190.0, 181.0, 188.2], 3153: [187.6, 199.6, 186.4, 195.4, 193.0], 3155: [173.8, 180.4, 186.4, 178.0, 177.0], 3158: [185.8, 184.6, 184.6, 182.2, 189.4], 3169: [192.4, 197.2, 199.0, 188.2, 191.8], 3230: [179.8, 186.4, 185.8, 179.2, 187.0], 3237: [181.0, 190.0, 191.8, 180.4, 185.8], 3242: [189.4, 187.0, 185.8, 179.8, 186.4], 3250: [186.4, 180.4, 185.8, 181.6, 199.6], 3251: [174.4, 194.2, 190.0, 179.5, 182.8], 3290: [186.4, 181.0, 175.0, 177.0, 181.0], 3297: [188.2, 186.4, 184.0, 190.0, 185.8], 3307: [185.8, 186.6, 185.2, 183.4, 202.6], 3356: [200.2, 180.4, 178.0, 185.8, 188.8], 3365: [195.4, 193.75, 185.8, 191.2, 198.4], 3396: [185.8, 181.0, 178.0, 183.0, 180.25], 3397: [189.4, 199.6, 182.2, 187.0, 195.4], 3398: [175.8, 178.8, 173.8, 173.6, 176.6], 3401: [178.0, 178.0, 178.0, 176.2, 186.4], 3405: [185.0, 193.0, 190.0, 186.0, 195.6], 3638: [185.8, 179.5, 181.75, 180.4, 185.2], 3721: [190.6, 188.8, 184.0, 190.0, 186.4], 3915: [183.0, 180.0, 178.5, 182.5, 191.0], 3974: [189.4, 184.6, 184.0, 198.4, 191.8]}
def predictData():
    values = []
    for key in some_dict:
        asd=some_dict[key]
        va=knn.predict(list([asd]))
        print("2) Using K Neighbors Classifier Prediction is "+str(key) + str(va))
predictData()